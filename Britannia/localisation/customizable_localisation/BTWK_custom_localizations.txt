#Returns the name of the Romanized culture local to the region
defined_text = {
	name = GetLocalRomanCulture

	text = {
		trigger = { 
			is_romanobritish_area_trigger = yes
		}
		localisation_key = romanobritish
	}	
	text = {
		trigger = {
			is_romanogallic_area_trigger = yes
		}
		localisation_key = romanogallic
	}
	text = {
		trigger = {
			is_romanoaquitanian_area_trigger = yes
		}
		localisation_key = romanoaquitanian
	}
	text = {
		trigger = {
			is_romanogermanic_area_trigger = yes
		}
		localisation_key = romanogermanic
	}
	text = {
		trigger = {
			is_romanoscandian_area_trigger = yes
		}
		localisation_key = romanoscandian
	}
}

#Returns name of the default pagan religion of the current scope's culture
defined_text = {
	name = GetDefaultPaganReligion

	text = {
		trigger = { 
			is_brythonic_culture_trigger = yes
			NOT = { has_global_flag = briton_reformation }
		}
		localisation_key = briton_pagan
	}
	text = {
		trigger = { 
			is_brythonic_culture_trigger = yes
			has_global_flag = briton_reformation
		}
		localisation_key = briton_pagan_reformed
	}
	text = {
		trigger = { 
			culture = pictish 
			NOT = { has_global_flag = pict_reformation }
		}
		localisation_key = pict_pagan
	}
	text = {
		trigger = { 
			culture = pictish 
			has_global_flag = pict_reformation
		}
		localisation_key = pict_pagan_reformed
	}
	text = {
		trigger = { 
			is_gaelic_culture_trigger = yes
			NOT = { has_global_flag = gael_reformation }
		}
		localisation_key = gael_pagan
	}
	text = {
		trigger = { 
			is_gaelic_culture_trigger = yes
			has_global_flag = gael_reformation
		}
		localisation_key = gael_pagan_reformed
	}
	text = {
		trigger = { 
			is_ingvaeonic_culture_trigger = yes		
			NOT = { has_global_flag = germanic_reformation } 
		}
		localisation_key = germanic_pagan
	}
	text = {
		trigger = { 
			is_ingvaeonic_culture_trigger = yes
			has_global_flag = germanic_reformation 
		}
		localisation_key = germanic_pagan_reformed
	}
	text = {
		trigger = { 
			is_north_germanic_trigger = yes	
			NOT = { has_global_flag = norse_reformation } 
		}
		localisation_key = norse_pagan
	}
	text = {
		trigger = { 
			is_north_germanic_trigger = yes
			has_global_flag = norse_reformation 			
		}
		localisation_key = norse_pagan_reformed
	}
	text = {
		trigger = { 
			is_istvaeonic_culture_trigger = yes		
			NOT = { has_global_flag = frankish_reformation } 
		}
		localisation_key = frankish_pagan
	}
	text = {
		trigger = {
			is_istvaeonic_culture_trigger = yes		
			has_global_flag = frankish_reformation 			
		}
		localisation_key = frankish_pagan_reformed
	}
	text = {
		trigger = {
			is_irminonic_culture_trigger = yes	
			NOT = { has_global_flag = suebic_reformation } 
		}
		localisation_key = suebic_pagan
	}
	text = {
		trigger = {
			is_irminonic_culture_trigger = yes		
			has_global_flag = suebic_reformation 			
		}
		localisation_key = suebic_pagan_reformed
	}
	text = {
		trigger = {
			is_east_germanic_trigger = yes	
			NOT = { has_global_flag = gothic_reformation } 
		}
		localisation_key = gothic_pagan
	}
	text = {
		trigger = {
			is_east_germanic_trigger = yes		
			has_global_flag = gothic_reformation 			
		}
		localisation_key = gothic_pagan_reformed
	}
	text = {
		trigger = {
			is_roman_pagan_culture_trigger = yes		
			NOT = { has_global_flag = roman_reformation }		
		}
		localisation_key = roman_pagan
	}
	text = {
		trigger = {
			is_roman_pagan_culture_trigger = yes		
			has_global_flag = roman_reformation_roman_pagan_reformed 			
		}
		localisation_key = roman_pagan_reformed
	}
	text = {
		trigger = {
			is_roman_pagan_culture_trigger = yes		
			has_global_flag = roman_reformation_sol_invictus 			
		}
		localisation_key = sol_invictus
	}
	text = {
		trigger = {
			culture_group = sarmatian
			NOT = { has_global_flag = alan_reformation } 
		}
		localisation_key = alan_pagan
	}
	text = {
		trigger = {
			culture_group = sarmatian
			has_global_flag = alan_reformation 
		}
		localisation_key = alan_pagan_reformed
	}
	text = {
		trigger = {
			culture_group = altaic
			NOT = { has_global_flag = tengri_reformation } 
		}
		localisation_key = tengri_pagan
	}
	text = {
		trigger = {
			culture_group = altaic
			has_global_flag = tengri_reformation 
		}
		localisation_key = tengri_pagan_reformed
	}
	text = {
		trigger = {
			culture_group = basque
			NOT = { has_global_flag = vasconic_reformation } 
		}
		localisation_key = vasconic_pagan
	}
	text = {
		trigger = {
			culture_group = basque
			has_global_flag = vasconic_reformation 
		}
		localisation_key = vasconic_pagan_reformed
	}
	text = {
		trigger = {
			culture_group = israelite
		}
		localisation_key = jewish
	}
}

#Returns the name of the kingdom that currently controls Northern Provence
defined_text = {
	name = GetNorthernProvenceCurrentController

	text = {
		trigger = { 
			has_global_flag = northern_provence_conquered_burgundy
		}
		localisation_key = k_burgundy
	}	
	text = {
		trigger = {
			has_global_flag = northern_provence_conquered_ostrogoths
		}
		localisation_key = k_ostrogoths
	}
	fallback_text = {
		localisation_key = String_Romans
	}
}

#Returns the adjective of the kingdom that currently controls Northern Provence
defined_text = {
	name = GetNorthernProvenceCurrentControllerAdj

	text = {
		trigger = { 
			has_global_flag = northern_provence_conquered_burgundy
		}
		localisation_key = k_burgundy_adj
	}	
	text = {
		trigger = {
			has_global_flag = northern_provence_conquered_ostrogoths
		}
		localisation_key = k_ostrogoths_adj
	}
	fallback_text = {
		localisation_key = e_western_roman_empire_adj
	}
}

#Returns the name of the kingdom that currently controls Southern Provence
defined_text = {
	name = GetSouthernProvenceCurrentController

	text = {
		trigger = { 
			has_global_flag = southern_provence_conquered_visigoths
		}
		localisation_key = k_visigoths
	}	
	text = {
		trigger = { 
			has_global_flag = southern_provence_conquered_burgundy
		}
		localisation_key = k_burgundy
	}	
	text = {
		trigger = {
			has_global_flag = southern_provence_conquered_ostrogoths
		}
		localisation_key = k_ostrogoths
	}
	fallback_text = {
		localisation_key = String_Romans
	}
}

#Returns the adjective of the kingdom that currently controls Southern Provence
defined_text = {
	name = GetSouthernProvenceCurrentControllerAdj

	text = {
		trigger = { 
			has_global_flag = southern_provence_conquered_visigoths
		}
		localisation_key = k_visigoths_adj
	}	
	text = {
		trigger = { 
			has_global_flag = southern_provence_conquered_burgundy
		}
		localisation_key = k_burgundy_adj
	}	
	text = {
		trigger = {
			has_global_flag = southern_provence_conquered_ostrogoths
		}
		localisation_key = k_ostrogoths_adj
	}
	fallback_text = {
		localisation_key = e_western_roman_empire_adj
	}
}

#Returns Arthur's current status
defined_text = {
	name = GetArthurTitle

	text = {
		trigger = { 
			event_target:arthur_pendragon = { has_landed_title = e_britannia }
		}
		localisation_key = String_imperator_britannia
	}	
	text = {
		trigger = { 
			event_target:arthur_pendragon = { has_landed_title = k_dumnonia }
		}
		localisation_key = String_king_dumnonia
	}	
	text = {
		trigger = {
			event_target:arthur_pendragon = { 
				top_liege = {
					has_landed_title = k_dumnonia
					regent = {
						character = ROOT
					}
				}
			}
		}
		localisation_key = String_regent_dumnonia
	}
	fallback_text = {
		localisation_key = String_prince_dumnonia
	}
}

#Returns Lancelot's current status
defined_text = {
	name = GetLancelotTitle

	text = {
		trigger = { 
			event_target:lancelot_dulac = { higher_tier_than = DUKE }
		}
		localisation_key = String_lancelot_title
	}	
	text = {
		trigger = { 
			event_target:lancelot_dulac = { 
				father_even_if_dead = { is_alive = no }
				k_benoic = { has_holder = no }
			}
		}
		localisation_key = String_dispossessed_king_benoic
	}
	fallback_text = {
		localisation_key = String_prince_benoic
	}
}

#Returns the vassal limit given by Centralization 0, depending on the government
defined_text = {
	name = GetCentralization0VassalLimit

	text = {
		trigger = { 
			holder_scope = {
				OR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_plus_10
	}	
	text = {
		trigger = { 
			holder_scope = {
				NOR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_plus_4
	}
}

#Returns the vassal limit given by Centralization 1, depending on the government
defined_text = {
	name = GetCentralization1VassalLimit

	text = {
		trigger = { 
			holder_scope = {
				OR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_plus_5
	}	
	text = {
		trigger = { 
			holder_scope = {
				NOR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_plus_2
	}
}

#Returns the vassal limit given by Centralization 3, depending on the government
defined_text = {
	name = GetCentralization3VassalLimit

	text = {
		trigger = { 
			holder_scope = {
				OR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_minus_5
	}	
	text = {
		trigger = { 
			holder_scope = {
				NOR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_minus_2
	}
}

#Returns the vassal limit given by Centralization 0, depending on the government
defined_text = {
	name = GetCentralization4VassalLimit

	text = {
		trigger = { 
			holder_scope = {
				OR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_minus_10
	}	
	text = {
		trigger = { 
			holder_scope = {
				NOR = {
					government = imperial_government
					government = sub_roman_government
					government = germanic_government
				}
			}
		}
		localisation_key = String_minus_4
	}
}

#Returns Queen or King depending on the character's gender
defined_text = {
	name = GetQueenKing

	text = {
		trigger = { 
			is_female = no
		}
		localisation_key = king
	}	
	text = {
		trigger = { 
			is_female = yes
		}
		localisation_key = king_female
	}
}