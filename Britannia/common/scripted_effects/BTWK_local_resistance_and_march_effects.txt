
set_proper_local_resistance_level_effect = {
	if = {
		limit = { 
			check_variable = {
				which = pacification_years_remaining
				value = 26
			}
		}
		remove_province_modifier = local_resistance_1
		remove_province_modifier = local_resistance_2
		remove_province_modifier = local_resistance_1_quiet
		remove_province_modifier = local_resistance_2_quiet
		remove_province_modifier = local_resistance_1_march
		remove_province_modifier = local_resistance_2_march
		if = {
			limit = { owner = { culture = ROOT } }
			add_province_modifier = { 
				name = local_resistance_3_quiet
				duration = -1
			}
		}
		else_if = {
			limit = { owner = { top_liege = { is_tributary = { type = march } } } }
			add_province_modifier = { 
				name = local_resistance_3_march
				duration = -1
			}
		}
		else = {
			add_province_modifier = { 
				name = local_resistance_3
				duration = -1
			}
		}
	}
	else_if = {
		limit = { 
			check_variable = {
				which = pacification_years_remaining
				value = 11
			}
		}
		remove_province_modifier = local_resistance_1
		remove_province_modifier = local_resistance_3
		remove_province_modifier = local_resistance_1_quiet
		remove_province_modifier = local_resistance_3_quiet
		remove_province_modifier = local_resistance_1_march
		remove_province_modifier = local_resistance_3_march
		if = {
			limit = { owner = { culture = ROOT } }
			add_province_modifier = { 
				name = local_resistance_2_quiet
				duration = -1
			}
		}
		else_if = {
			limit = { owner = { top_liege = { is_tributary = { type = march } } } }
			add_province_modifier = { 
				name = local_resistance_2_march
				duration = -1
			}
		}
		else = {
			add_province_modifier = { 
				name = local_resistance_2
				duration = -1
			}
		}
	}
	else = {
		remove_province_modifier = local_resistance_1
		remove_province_modifier = local_resistance_2
		remove_province_modifier = local_resistance_1_quiet
		remove_province_modifier = local_resistance_2_quiet
		remove_province_modifier = local_resistance_1_march
		remove_province_modifier = local_resistance_2_march
		if = {
			limit = { owner = { culture = ROOT } }
			add_province_modifier = { 
				name = local_resistance_1_quiet
				duration = -1
			}
		}
		else_if = {
			limit = { owner = { top_liege = { is_tributary = { type = march } } } }
			add_province_modifier = { 
				name = local_resistance_1_march
				duration = -1
			}
		}
		else = {
			add_province_modifier = { 
				name = local_resistance_1
				duration = -1
			}
		}
	}
}

# Called from province scope
# target_owner_char should be an independent ruler
# Calculates the number of provinces in the region of the scope owned by target_owner_char or one of 
# their marches with the local culture of the resistance region, and then saves it into the 
# num_local_resistance_culture_provs variable on target_owner_char
calc_num_of_local_resistance_culture_provinces_in_region_owned_by_char_effect = {
	save_event_target_as = current_resistance_region_province
	event_target:target_owner_char = {
		set_variable = { which = num_local_resistance_culture_provs value = 0 }
		# Add together all provinces under the realm
		any_realm_province = {
			limit = {
				is_local_resistance_region_culture_trigger = yes
				is_in_current_resistance_region_province = yes
			}
			PREV = { change_variable = { which = num_local_resistance_culture_provs value = 1 } }
		}
		# ... including marches (if realm has marches)
		any_tributary = {
			limit = { is_tributary = { type = march } }
			any_realm_province = {
				limit = {
					is_local_resistance_region_culture_trigger = yes
					is_in_current_resistance_region_province = yes
				}
				PREVPREV = { change_variable = { which = num_local_resistance_culture_provs value = 1 } }
			}
		}
	}
}

# Saves the ruler with the most provinces in the region of the scope province
# with the local culture of the local resistance region as target_ruler
# Marches are considered part of the realm of the target_ruler
get_ruler_with_most_local_resistance_culture_provinces_in_region_effect = {
	save_event_target_as = current_resistance_region_province
	set_variable = { which = global_highest_num_local_resistance_culture_provs value = 0 }
	clear_event_target = target_ruler
	any_independent_ruler = {
		save_event_target_as = target_owner_char
		event_target:current_resistance_region_province = {
			calc_num_of_local_resistance_culture_provinces_in_region_owned_by_char_effect = yes
		}
		# Get the ruler with the highest number of local resistance culture provinces
		if = {
			limit = {
				check_variable = { 
					which = num_local_resistance_culture_provs
					which > global_highest_num_local_resistance_culture_provs
				}
			}
			set_variable = { 
				which = global_highest_num_local_resistance_culture_provs
				which = num_local_resistance_culture_provs
			}
		}
	}
	if = {
		limit = {
			any_independent_ruler = { check_variable = { which = num_local_resistance_provs value > 0 } }
		}
		random_independent_ruler = {
			limit = {
				check_variable = { 
					which = num_local_resistance_culture_provs
					which >= global_highest_num_local_resistance_culture_provs
				}
			}
			preferred_limit = {
				NOT = { is_tributary = { type = march } }
			}
			save_event_target_as = target_ruler
		}
	}
}

# Called from province scope
# Result is saved in the num_local_resistance_provs variable in ROOT
# Meant to be used with is_major_revolt_possible_for_war_trigger
calc_num_of_local_resistance_provinces_in_region_effect = {
	ROOT = { set_variable = { which = num_local_resistance_provs value = 0 } }
	save_event_target_as = current_resistance_region_province
	
	owner = {
		top_liege = {	
			# Add together all provinces under the realm
			any_realm_province = {
				limit = {
					has_province_flag = has_local_resistance
					is_in_current_resistance_region_province = yes
				}
				ROOT = { change_variable = { which = num_local_resistance_provs value = 1 } }
			}
			# ... including suzerains (if a march)
			if = {
				limit = { is_tributary = { type = march } }
				suzerain = {
					any_realm_province = {
						limit = {
							has_province_flag = has_local_resistance
							is_in_current_resistance_region_province = yes
						}
						ROOT = { change_variable = { which = num_local_resistance_provs value = 1 } }
					}
					# Check other marches of suzerain
					any_tributary = {
						limit = { 
							is_tributary = { type = march } 
							NOT = { character = PREVPREV }
						}
						any_realm_province = {
							limit = {
								has_province_flag = has_local_resistance
								is_in_current_resistance_region_province = yes
							}
							ROOT = { change_variable = { which = num_local_resistance_provs value = 1 } }
						}
					}
				}
			}
			# ... and marches (if realm has marches)
			any_tributary = {
				limit = { is_tributary = { type = march } }
				any_realm_province = {
					limit = {
						has_province_flag = has_local_resistance
						is_in_current_resistance_region_province = yes
					}
					ROOT = { change_variable = { which = num_local_resistance_provs value = 1 } }
				}
			}
		}
	}
}

# Province scope
# Sets that there is now a major revolt active in the province's major revolt region
set_major_revolt_active_effect = {
	get_major_revolt_variables_title_effect = yes
	event_target:major_revolt_title = { 
		set_title_flag = major_revolt_ongoing 
		clr_title_flag = major_revolt_ended
	}
}

set_major_revolt_over_effect = {
	get_major_revolt_variables_title_effect = yes
	event_target:major_revolt_title = { 
		clr_title_flag = major_revolt_ongoing
		set_title_flag = major_revolt_ended
	}
}

# Province scope
# Saves the title that the major revolt variables are saved onto the major_revolt_title event_target
get_major_revolt_variables_title_effect = {
	clear_event_target = major_revolt_title
	if = {
		limit = { in_wales_local_resistance_region_trigger = yes }
		e_cymru = { save_event_target_as = major_revolt_title }
	}
	else_if = {
		limit = { in_caledonia_local_resistance_region_trigger = yes }
		e_alba = { save_event_target_as = major_revolt_title }
	}
	else_if = {
		limit = { in_armorica_local_resistance_region_trigger = yes }
		e_armorica = { save_event_target_as = major_revolt_title }
	}
	else_if = {
		limit = { in_vasconia_local_resistance_region_trigger = yes }
		e_aquitania = { save_event_target_as = major_revolt_title }
	}
}

# Character scope - should be the revolt leader
# ROOT is the province that the revolt spawned from
adjust_revolt_army_size_effect = {
	save_event_target_as = revolter_character
	set_variable = {
		which = global_troop_change
		value = 0
	}
	
	# Offset additional maluses from tribal + wrong culture/religion
	if = {
		limit = { ROOT = { any_province_holding = { holding_type = TRIBAL } } }
		if = {
			limit = { ROOT = { owner = { NOT = { culture = ROOT } } } }
			change_variable = {
				which = global_troop_change
				value = 0.10
			}
		}
		if = {
			limit = { ROOT = { owner = { NOT = { culture_group = ROOT } } } }
			change_variable = {
				which = global_troop_change
				value = 0.20
			}	
			# Additional modifier for wrong culture group feudal rulers on tribal provinces
			if = {
				limit = { 
					ROOT = { owner = { is_tribal = no } }
				}
				change_variable = {
					which = global_troop_change
					value = 0.40
				}
			}
			# Smaller modifier for high tribal rulers on low tribal provinces
			else_if = {
				limit = { 
					ROOT = { 
						owner = { government = high_tribal_government } 
						NOT = {
							any_province_holding = {
								holding_type = TRIBAL
								OR = {
									has_building = tb_hillfort_5
									has_building = tb_hillfort_6
									has_building = tb_hillfort_7
									has_building = tb_hillfort_8
								}
							}
						}
					}
				}
				change_variable = {
					which = global_troop_change
					value = 0.20
				}
			}
		}
		if = {
			limit = { ROOT = { owner = { NOT = { religion = ROOT } } } }
			change_variable = {
				which = global_troop_change
				value = 0.05
			}
		}
		if = {
			limit = { ROOT = { owner = { NOT = { religion_group = ROOT } } } }
			change_variable = {
				which = global_troop_change
				value = 0.10
			}
		}
		if = {
			limit = { ROOT = { has_province_modifier = province_not_dejure_liege } }
			change_variable = {
				which = global_troop_change
				value = 0.10
			}
		}
	}
	# Offset base wrong culture/religion maluses
	if = {
		limit = { ROOT = { owner = { NOT = { culture = ROOT } } } }
		change_variable = {
			which = global_troop_change
			value = 0.10
		}
	}
	if = {
		limit = { ROOT = { owner = { NOT = { culture_group = ROOT } } } }
		change_variable = {
			which = global_troop_change
			value = 0.15
		}
	}
	if = {
		limit = { ROOT = { owner = { NOT = { religion = ROOT } } } }
		change_variable = {
			which = global_troop_change
			value = 0.10
		}
	}
	if = {
		limit = { ROOT = { owner = { NOT = { religion_group = ROOT } } } }
		change_variable = {
			which = global_troop_change
			value = 0.15
		}
	}
	
	# Note: since many of the local resistance modifiers significantly decrease levy and garrison size, most of these increases
	# are not as large as they look like
	if = {
		limit = { ROOT = { has_province_modifier = local_resistance_3 } }
		change_variable = {
			which = global_troop_change
			value = 0.5
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_2 } }
		change_variable = {
			which = global_troop_change
			value = 0.37
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_1 } }
		change_variable = {
			which = global_troop_change
			value = 0.25
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_3_quiet } }
		change_variable = {
			which = global_troop_change
			value = 0.25
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_2_quiet } }
		change_variable = {
			which = global_troop_change
			value = 0.17
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_1_quiet } }
		change_variable = {
			which = global_troop_change
			value = 0.1
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_3_march } }
		change_variable = {
			which = global_troop_change
			value = 0.3
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_2_march } }
		change_variable = {
			which = global_troop_change
			value = 0.2
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = local_resistance_1_march } }
		change_variable = {
			which = global_troop_change
			value = 0.1
		}
	}
	
	# If there's a major revolt ongoing, get another boost (some of this compensates for the major revolt modifier)
	if = {
		limit = { ROOT = { has_province_modifier = ongoing_major_revolt } }
		change_variable = {
			which = global_troop_change
			value = 0.30
		}
	}
	else_if = {
		limit = { ROOT = { has_province_modifier = ongoing_major_revolt_minor } }
		change_variable = {
			which = global_troop_change
			value = 0.15
		}
	}
	
	
	# Cultural affinity of other provinces
	ROOT = { 
		owner = { 
			top_liege = {
				if = {
					limit = { 
						any_realm_province = {
							count = 20
							culture = ROOT
						}
						NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
					}
					change_variable = {
						which = global_troop_change
						value = 0.50
					}
				}
				else_if = {
					limit = { 
						any_realm_province = {
							count = 15
							culture = ROOT
						}
						NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
					}
					change_variable = {
						which = global_troop_change
						value = 0.35
					}
				}
				else_if = {
					limit = { 
						any_realm_province = {
							count = 10
							culture = ROOT
						}
					}
					change_variable = {
						which = global_troop_change
						value = 0.2
					}
				}
				else_if = {
					limit = { 
						any_realm_province = {
							count = 7
							culture = ROOT
						}
					}
					change_variable = {
						which = global_troop_change
						value = 0.1
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_realm_province = {
								count = 5
								culture = ROOT
							}
						}
					}
					change_variable = {
						which = global_troop_change
						value = -0.1
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_realm_province = {
								count = 4
								culture = ROOT
							}
						}
					}
					change_variable = {
						which = global_troop_change
						value = -0.2
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_realm_province = {
								count = 3
								culture = ROOT
							}
						}
					}
					change_variable = {
						which = global_troop_change
						value = -0.33
					}
				}
				else_if = {
					limit = {
						NOT = {
							any_realm_province = {
								count = 2
								culture = ROOT
							}
						}
					}
					change_variable = {
						which = global_troop_change
						value = -0.5
					}
				}
				
				# Wrong culture group tribal revolts also scale more
				if = {
					limit = {
						ROOT = { 
							any_province_holding = { holding_type = TRIBAL } 
							NOT = { culture_group = PREVPREV }
						}
					}
					if = {
						limit = { 
							any_realm_province = {
								count = 30
								culture = ROOT
							}
							NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
						}
						change_variable = {
							which = global_troop_change
							value = 0.5
						}
					}
					else_if = {
						limit = { 
							any_realm_province = {
								count = 25
								culture = ROOT
							}
							NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
						}
						change_variable = {
							which = global_troop_change
							value = 0.4
						}
					}
					else_if = {
						limit = { 
							any_realm_province = {
								count = 18
								culture = ROOT
							}
							NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
						}
						change_variable = {
							which = global_troop_change
							value = 0.3
						}
					}
					else_if = {
						limit = { 
							any_realm_province = {
								count = 12
								culture = ROOT
							}
							NOT = { event_target:revolter_character = { has_character_flag = peasant_revolter } }
						}
						change_variable = {
							which = global_troop_change
							value = 0.2
						}
					}
					else_if = {
						limit = { 
							any_realm_province = {
								count = 8
								culture = ROOT
							}
						}
						change_variable = {
							which = global_troop_change
							value = 0.1
						}
					}
					else_if = {
						limit = { 
							any_realm_province = {
								count = 6
								culture = ROOT
							}
						}
						change_variable = {
							which = global_troop_change
							value = 0.05
						}
					}
				}
			} 
		} 
	}
	
	# Imperial culture group provinces do not revolt as much if the owner is of the same religion
	if = {
		limit = { 
			ROOT = { 
				NOT = { any_province_holding = { holding_type = TRIBAL } }
				culture_group = imperiale
				owner = { 
					NOT = { culture_group = imperiale } 
					religion = ROOT
				}
			}
		}
		change_variable = {
			which = global_troop_change
			value = -0.15
		}
	}
	
	# global_troop_decrease = (1 + global_troop_change) / 4 - 1
	# Converts global_troop_decrease into a decrease from 4 * the normal size
	set_variable = {
		which = global_troop_decrease
		which = global_troop_change
	}
	change_variable = {
		which = global_troop_decrease
		value = 1
	}
	divide_variable = {
		which = global_troop_decrease
		value = 4
	}
	subtract_variable = {
		which = global_troop_decrease
		value = 1
	}
	any_army = {
		# Note: Limit doesn't work here!
		if = {
			limit = { location = { province = ROOT } }
			troops = global_troop_decrease
		}
	}
	
	# Adjust for tribal holding slots (can make troops spiral out of control if there are many)
	# Applied as a multiplicative multiplier
	if = {
		limit = { ROOT = { any_province_holding = { holding_type = TRIBAL } } }
		if = {
			limit = { 
				ROOT = { num_of_empty_holdings = 3 } 
			}
			# Note that this command is proportional to the army's total size - which is 4 times the "actual" base size!
			# So e.g. this is actually equivalent to a -100% modifier
			any_army = {
				if = {
					limit = { location = { province = ROOT } }
					troops = -0.25
				}
			}
		}
		else_if = {
			limit = { 
				ROOT = { num_of_empty_holdings = 2 } 
			}
			any_army = {
				if = {
					limit = { location = { province = ROOT } }
					troops = -0.15
				}
			}
		}
	}
}

# Requires the current_resistance_region_province be a saved event target
# Scope is the character to save as the leader
set_major_revolt_leader_character = {
	if = {
		limit = { event_target:current_resistance_region_province = { in_wales_local_resistance_region_trigger = yes } }
		save_global_event_target_as = major_revolt_leader_wales
	}
	else_if = {
		limit = { event_target:current_resistance_region_province = { in_caledonia_local_resistance_region_trigger = yes } }
		save_global_event_target_as = major_revolt_leader_caledonia
	}
	else_if = {
		limit = { event_target:current_resistance_region_province = { in_armorica_local_resistance_region_trigger = yes } }
		save_global_event_target_as = major_revolt_leader_armorica
	}
	else_if = {
		limit = { event_target:current_resistance_region_province = { in_vasconia_local_resistance_region_trigger = yes } }
		save_global_event_target_as = major_revolt_leader_vasconia
	}
}

# Requires the current_resistance_region_province be a saved event target
# Scope is the character to save as the leader
set_major_revolt_leader_character_if_none = {
	event_target:current_resistance_region_province = { get_major_revolt_leader_character = yes }
	if = {
		limit = {
			 NOT = { event_target:current_major_revolt_leader = { always = yes } }
		}
		set_character_flag = no_current_major_revolt_leader
		set_major_revolt_leader_character = yes
	}
}

# Scope is a province in the target major revolt region
get_major_revolt_leader_character = {
	clear_event_target = current_major_revolt_leader
	if = {
		limit = { in_wales_local_resistance_region_trigger = yes }
		event_target:major_revolt_leader_wales = { save_event_target_as = current_major_revolt_leader }
	}
	else_if = {
		limit = { in_caledonia_local_resistance_region_trigger = yes }
		event_target:major_revolt_leader_caledonia = { save_event_target_as = current_major_revolt_leader }
	}
	else_if = {
		limit = { in_armorica_local_resistance_region_trigger = yes }
		event_target:major_revolt_leader_armorica = { save_event_target_as = current_major_revolt_leader }
	}
	else_if = {
		limit = { in_vasconia_local_resistance_region_trigger = yes }
		event_target:major_revolt_leader_vasconia = { save_event_target_as = current_major_revolt_leader }
	}
}

# Scope is a province in the target major revolt region
clear_major_revolt_leader_character = {
	clear_event_target = current_major_revolt_leader
	if = {
		limit = { in_wales_local_resistance_region_trigger = yes }
		clear_global_event_target = major_revolt_leader_wales
	}
	else_if = {
		limit = { in_caledonia_local_resistance_region_trigger = yes }
		clear_global_event_target = major_revolt_leader_caledonia
	}
	else_if = {
		limit = { in_armorica_local_resistance_region_trigger = yes }
		clear_global_event_target = major_revolt_leader_armorica
	}
	else_if = {
		limit = { in_vasconia_local_resistance_region_trigger = yes }
		clear_global_event_target = major_revolt_leader_vasconia
	}
}


check_unlanded_rebel_in_major_revolt_successful = {
	hidden_effect = {
		if = {
			limit = {
				 is_major_revolt_rebel_trigger = yes
			}
			any_war = {
				limit = {
					attacker = { character = ROOT }
				}
				thirdparty_title_scope = {
					random_direct_de_jure_vassal_title = {
						limit = { owner = { top_liege = { character = FROM } } }
						location = { save_event_target_as = current_resistance_region_province }
					}
				}
			}
			event_target:current_resistance_region_province = {
				get_major_revolt_variables_title_effect = yes
			}
			event_target:major_revolt_title = {
				change_variable = {
					which = num_revolts_succeeded
					value = 1
				}
			}
			set_major_revolt_leader_character_if_none = yes
		}
	}
}

check_unlanded_rebel_in_major_revolt_crushed = {
	hidden_effect = {
		if = {
			limit = {
				 is_major_revolt_rebel_trigger = yes
			}
			any_war = {
				limit = {
					attacker = { character = ROOT }
				}
				thirdparty_title_scope = {
					random_direct_de_jure_vassal_title = {
						limit = { owner = { top_liege = { character = FROM } } }
						location = { save_event_target_as = current_resistance_region_province }
					}
				}
			}
			event_target:current_resistance_region_province = {
				get_major_revolt_variables_title_effect = yes
			}
			event_target:major_revolt_title = {
				change_variable = {
					which = num_revolts_crushed
					value = 1
				}
			}
		}
	}
}

check_landed_rebel_in_major_revolt_successful = {
	hidden_effect = {
		if = {
			limit = {
				 is_major_revolt_rebel_trigger = yes
			}
			set_character_flag = is_major_revolt_rebel
			random_realm_province = {
				limit = {
					has_active_major_revolt_trigger = yes
					is_in_resistance_region_of_prev_culture_trigger = yes
				}
				save_event_target_as = current_resistance_region_province
			}
			event_target:current_resistance_region_province = {
				set_province_flag = current_resistance_region_province_prov
				get_major_revolt_variables_title_effect = yes
			}
			event_target:major_revolt_title = {
				set_title_flag = major_revolt_title_title
				change_variable = {
					which = num_revolts_succeeded
					value = 1
				}				
			}
			set_major_revolt_leader_character_if_none = yes
			# Check if is in another major revolt region (2 is theoretically possible)
			if = {
				limit = {
					any_realm_province = {
						has_active_major_revolt_trigger = yes
						is_in_resistance_region_of_prev_culture_trigger = yes
						is_in_current_resistance_region_province = no
					}
				}
				random_realm_province = {
					limit = {
						has_active_major_revolt_trigger = yes
						is_in_resistance_region_of_prev_culture_trigger = yes
						is_in_current_resistance_region_province = no
					}
					save_event_target_as = current_resistance_region_province
				}
				event_target:current_resistance_region_province = {
					get_major_revolt_variables_title_effect = yes
				}
				event_target:major_revolt_title = {
					change_variable = {
						which = num_revolts_succeeded
						value = 1
					}				
				}
				set_major_revolt_leader_character_if_none = yes
			}
		}
	}
}

check_landed_rebel_in_major_revolt_crushed = {
	hidden_effect = {
		if = {
			limit = {
				 is_major_revolt_rebel_trigger = yes
			}
			random_realm_province = {
				limit = {
					has_active_major_revolt_trigger = yes
					is_in_resistance_region_of_prev_culture_trigger = yes
				}
				save_event_target_as = current_resistance_region_province
			}
			event_target:current_resistance_region_province = {
				get_major_revolt_variables_title_effect = yes
			}
			event_target:major_revolt_title = {
				change_variable = {
					which = num_revolts_crushed
					value = 1
				}				
			}
			# Check if is in another major revolt region (2 is theoretically possible)
			if = {
				limit = {
					any_realm_province = {
						has_active_major_revolt_trigger = yes
						is_in_resistance_region_of_prev_culture_trigger = yes
						is_in_current_resistance_region_province = no
					}
				}
				random_realm_province = {
					limit = {
						has_active_major_revolt_trigger = yes
						is_in_resistance_region_of_prev_culture_trigger = yes
						is_in_current_resistance_region_province = no
					}
					save_event_target_as = current_resistance_region_province
				}
				event_target:current_resistance_region_province = {
					get_major_revolt_variables_title_effect = yes
				}
				event_target:major_revolt_title = {
					change_variable = {
						which = num_revolts_crushed
						value = 1
					}				
				}
			}
		}
	}
}

# Checks if the major revolt occuring in current_resistance_region_province is over, and if so
# fires the ending event on the appropriate character
check_if_major_revolt_is_over_and_fire_event_effect = {
	if = {
		limit = {
			any_major_revolt_rebels_in_region_trigger = no
		}
		event_target:current_resistance_region_province = { get_major_revolt_leader_character = yes }
		if = {
			limit = {
				event_target:current_major_revolt_leader = { always = yes }
			}
			set_character_flag = sending_event_to_current_major_revolt_leader
			set_character_flag = sending_event_to_@event_target:current_major_revolt_leader
			event_target:current_major_revolt_leader = { character_event = { id = 320740 } }
		}
		else = {
			# Just get the ruler with the most provinces of the local resistance culture
			event_target:current_resistance_region_province = {
				get_ruler_with_most_local_resistance_culture_provinces_in_region_effect = yes
			}
			if = {
				limit = {
					event_target:target_ruler = { always = yes }
				}
				set_character_flag = sending_event_to_target_ruler
				set_character_flag = sending_event_to_@event_target:target_ruler
				event_target:target_ruler = { character_event = { id = 320740 } }
			}
			# This is incredibly unlikely to fail (borderline impossible without cheats)
			# so just grab some random ruler in the region
			else = {
				set_character_flag = sending_event_to_random_ruler
				event_target:current_resistance_region_province = {
					owner = {
						top_liege = {
							character_event = { id = 320740 }
						}
					}
				}
			}
		}
	}
}

# SCOPE - The march title to transfer the vassal to
# ROOT - The title to be grant
# FROM - The liege of the march (and original holder of the title)
grant_county_to_march_effect = {
	holder_scope = {
		show_scope_change = no
		grant_title = ROOT
		tooltip = {
			opinion = {
				modifier = opinion_granted_county
				who = FROM
			}
		}
		character_event = { id = 320925 }
	}
}

# SCOPE - The march title to transfer the vassal to
# ROOT - The vassal to be transferred
# FROM - The liege of the march and vassal
transfer_vassal_to_march_effect = {
	holder_scope = {
		show_scope_change = no
		set_defacto_vassal = ROOT
		opinion = {
			modifier = opinion_vassal_transfer
			who = FROM
		}
		character_event = { id = 320926 }
	}
}

# Flags all marches of the event target
flag_target_marches_effect = {
	event_target:target_char = {
		set_character_flag = i_am_from
		any_tributary = {
			set_character_flag = i_pay_tribute_to_from
		}
		any_tributary = {
			limit = { is_tributary = { type = march } }
			set_character_flag = is_march_of_@PREV
		}
	}
}

# Transfers relevant marches from FROM to the new owner after a claimant war (or similar). Assumes that flag_FROM_marches_effect was called before the title was usurped. mostly in case FROM becomes unlanded and the marches are lost.
# The march will be transferred if one of the following is true:
# - FROM is no longer landed
# - FROM is now a vassal of ROOT
# - FROM no longer neighbours the march, and ROOT does
# - The usurped title was Neustria, and the march was the Breton March
# - The usurped title was Aquitaine, and the march was Vasconia
# - The usurped title was Mercia, and the march was the Welsh March
# - The usurped title was Northumbria, and the march was the Pictish March
# SCOPE - The claimed title that was usurped
# event_target:new_holder - The claimant taking the title
# event_target:old_holder - The old holder of the title
transfer_marches_to_new_holder_claim_effect = {
	any_playable_ruler = {
		limit = {
			has_character_flag = is_march_of_@FROM
		}
		clr_character_flag = is_march_of_@FROM
		if = {
			limit = {
				OR = {
					FROM = { is_landed = no }
					FROM = { any_liege = { character = event_target:new_holder } }
					AND = {
						PREV = { title = k_neustria }
						has_landed_title = k_breton_march
					}
					AND = {
						PREV = { title = k_aquitaine }
						has_landed_title = k_vasconia
					}
					AND = {
						PREV = { title = k_mercia }
						has_landed_title = k_wales
					}
					AND = {
						PREV = { title = k_northumbria }
						has_landed_title = k_pictland
					}
					AND = {
						any_realm_province = {
							any_neighbor_province = {
								any_liege = { character = event_target:new_holder }
							}
						}
						NOT = {
							any_realm_province = {
								any_neighbor_province = {
									any_liege = { character = FROM }
								}
							}
						}
					}
				}
			}
			if = {
				limit = { is_tributary = yes }
				suzerain = {
					remove_tributary = PREV
				}
			}
			event_target:new_holder = {
				make_tributary = {
					who = PREV
					tributary_type = march
				}
			}
		}
	}
}

vassalize_duchy_for_correct_march_of_ROOT_w_opinion_effect_and_save = {
	if = {
		limit = { capital_scope = { in_armorica_march_region_trigger = yes } }
		ROOT = {
			show_scope_change = no
			any_tributary = {
				if = {
					limit = {
						is_tributary = { type = march } 
						has_landed_title = k_breton_march 
						k_breton_march = { has_title_flag = is_march }
					}
					vassalize_or_take_under_title_destroy_duchies = {
						title = PREVPREV
						enemy = FROM
					}
					opinion = {
						modifier = opinion_granted_duchy
						who = ROOT
					}
					save_event_target_as = target_march
				}
			}
		}
	}
	else_if = {
		limit = { capital_scope = { in_vasconia_march_region_trigger = yes } }
		ROOT = {
			show_scope_change = no
			any_tributary = {
				if = {
					limit = {
						is_tributary = { type = march } 
						has_landed_title = k_vasconia 
						k_vasconia = { has_title_flag = is_march }
					}
					vassalize_or_take_under_title_destroy_duchies = {
						title = PREVPREV
						enemy = FROM
					}
					opinion = {
						modifier = opinion_granted_duchy
						who = ROOT
					}
					save_event_target_as = target_march
				}
			}
		}
	}
	else_if = {
		limit = { capital_scope = { in_wales_march_region_trigger = yes } }
		ROOT = {
			show_scope_change = no
			any_tributary = {
				if = {
					limit = {
						is_tributary = { type = march } 
						has_landed_title = k_wales 
						k_wales = { has_title_flag = is_march }
					}
					vassalize_or_take_under_title_destroy_duchies = {
						title = PREVPREV
						enemy = FROM
					}
					opinion = {
						modifier = opinion_granted_duchy
						who = ROOT
					}
					save_event_target_as = target_march
				}
			}
		}
	}
	else_if = {
		limit = { capital_scope = { in_caledonia_march_region_trigger = yes } }
		ROOT = {
			show_scope_change = no
			random_tributary = {
				limit = {
					is_tributary = { type = march } 
					OR = {
						AND = {
							has_landed_title = k_pictland
							k_pictland = { has_title_flag = is_march }
						}
						AND = {
							has_landed_title = k_romancaledonia
							k_romancaledonia = { has_title_flag = is_march }
						}
					}
					any_realm_province = {
						any_neighbor_province = {
							province = PREVPREVPREV
						}
					}
				}
				vassalize_or_take_under_title_destroy_duchies = {
					title = PREVPREV
					enemy = FROM
				}
				opinion = {
					modifier = opinion_granted_duchy
					who = ROOT
				}
				save_event_target_as = target_march
			}	
		}
	}
}